DL Assignment - 04
Implement Google stock price prediction using Recurrent Neural Network

#import Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

 # read Dataset
df_train=pd.read_csv("Google_Stock_Price_Train.csv")
df_train.head(10)

#keras only takes numpy array
#will use Open price for prediction so we need to make it NumPy array
training_set = df_train.iloc[:, 1: 2].values
training_set

#scale the stock prices between (0, 1) to avoid intensive computation.
from sklearn.preprocessing import MinMaxScaler
sc= MinMaxScaler()
training_set=sc.fit_transform(training_set)
training_set

x_train= training_set[0:1257]
y_train= training_set[1:1258]
display(x_train.shape, y_train.shape)

 x_train=np.reshape(x_train, (1257 , 1 , 1))

 x_train.shape

df_test=pd.read_csv("Google_Stock_Price_Test.csv")
df_test

 figure=plt.figure(figsize=(10,10))
plt.subplots_adjust(top=1.35, bottom=1.2)
df_train['Open'].plot()
plt.ylabel('Open')
plt.xlabel(None)
plt.title(f"Sales Open")

 testing_set = df_test.iloc[:, 1: 2].values
testing_set

 testing_set=sc.fit_transform(testing_set)
testing_set.shape

x_test= testing_set[0:20]
y_test= testing_set[0:20]
#display(x_test, y_test)
y_test.shape

x_test=np.reshape(x_test, (20 , 1 , 1))

x_test.shape

 import tensorflow.keras as tk

 model = tk.Sequential()
model.add(tk.layers.LSTM(units=5, activation= 'sigmoid', input_shape=(None,1)))
model.add(tk.layers.Dense( units=1 ))
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(x_train, y_train, batch_size=32, epochs=50,validation_data=(x_test,y_test))

y_pred=model.predict(x_test)

plt.plot( y_test , color = 'red' , label = 'Real Google Stock Price')
plt.plot( y_pred , color = 'blue' , label = 'Predicted Google Stock Price')
plt.title('Google Stock Price Prediction')
plt.xlabel( 'time' )
plt.ylabel( 'Google Stock Price' )
plt.legend()
plt.show()
